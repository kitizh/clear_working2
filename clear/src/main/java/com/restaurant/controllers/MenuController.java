package com.restaurant.controllers;

import com.restaurant.entities.Menu;
import com.restaurant.repositories.MenuRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.*;
import java.util.stream.Collectors;

@Controller
@RequestMapping("/menu")
public class MenuController {

    private final MenuRepository menuRepository;

    public MenuController(MenuRepository menuRepository) {
        this.menuRepository = menuRepository;
    }

    @GetMapping
    public String getMenu(Model model, Authentication authentication) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –±–ª—é–¥ (–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ menuType)
        List<String> menuTypes = menuRepository.findAll().stream()
                .map(Menu::getMenuType)
                .distinct()
                .collect(Collectors.toList());

        // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É <–¢–∏–ø –±–ª—é–¥–∞, –°–ø–∏—Å–æ–∫ –±–ª—é–¥>
        Map<String, List<Menu>> menuItems = new HashMap<>();
        for (String type : menuTypes) {
            List<Menu> dishes = menuRepository.findByMenuType(type);
            menuItems.put(type, dishes);
        }

        // üîç –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        System.out.println("----- –¢–ò–ü–´ –ë–õ–Æ–î -----");
        menuTypes.forEach(System.out::println);
        System.out.println("----- –ú–ï–ù–Æ -----");
        menuItems.forEach((key, value) -> System.out.println(key + " -> " + value.size() + " –±–ª—é–¥"));

        model.addAttribute("menuTypes", menuTypes);
        model.addAttribute("menuItems", menuItems);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        boolean isAdmin = authentication != null && authentication.getAuthorities()
                .stream()
                .anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals("ROLE_ADMIN"));

        model.addAttribute("isAdmin", isAdmin);

        return "menu";
    }


    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/update")
    @ResponseBody
    public ResponseEntity<?> updateMenu(@RequestBody List<Menu> updatedMenus) {
        for (Menu updatedMenu : updatedMenus) {
            Menu menu = menuRepository.findById(updatedMenu.getMenuId())
                    .orElseThrow(() -> new NoSuchElementException("Menu not found"));
            menu.setDishName(updatedMenu.getDishName());
            menu.setDescription(updatedMenu.getDescription());
            menu.setPrice(updatedMenu.getPrice());
            menuRepository.save(menu);
        }
        return ResponseEntity.ok().build();
    }

    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/delete/{id}")
    @ResponseBody
    public ResponseEntity<?> deleteMenu(@PathVariable Long id) {
        menuRepository.deleteById(id);
        return ResponseEntity.ok().build();
    }
}
